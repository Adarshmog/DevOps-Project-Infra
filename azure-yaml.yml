trigger: none

pool:
  name: Newpool

variables:
  TF_WORKING_DIR: 'virtualMachine'
  AZURE_ARM: 'yamunaARM'

stages:
  # - stage: infra
  #   jobs:
  #     - job: terraformJob
  #       displayName: "Provision VM with Terraform"
  #       steps:
  #         - checkout: self
  #         - task: TerraformTask@5
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             workingDirectory: '$(TF_WORKING_DIR)'
  #             backendServiceArm: '$(AZURE_ARM)'
  #             backendAzureRmStorageAccountName: 'yamuna88351'
  #             backendAzureRmContainerName: 'tfstate'
  #             backendAzureRmKey: 'vm.tfstate'

  #         - task: TerraformTask@5
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'plan'
  #             workingDirectory: '$(TF_WORKING_DIR)'
  #             environmentServiceNameAzureRM: '$(AZURE_ARM)'

  #         - task: TerraformTask@5
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'apply'
  #             workingDirectory: '$(TF_WORKING_DIR)'
  #             environmentServiceNameAzureRM: '$(AZURE_ARM)'

  #         - script: |
  #             cd $(TF_WORKING_DIR)
  #             mkdir -p $(Pipeline.Workspace)/shared/ansible
  #             terraform output -raw ansible_inventory > $(Pipeline.Workspace)/shared/ansible/inventory.ini
  #             echo "Generated inventory:"
  #             cat $(Pipeline.Workspace)/shared/ansible/inventory.ini
  #           displayName: "Generate Ansible inventory"


  - stage: config
    # dependsOn: infra
    jobs:
      - job: ansibleJob
        displayName: "Configure VMs with Ansible"
        steps:
          - checkout: self

          - script: |
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i $(Pipeline.Workspace)/shared/ansible/inventory.ini ansible/playbook.yml
            displayName: "Run Ansible Playbook"   
